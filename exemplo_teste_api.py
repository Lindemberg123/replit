
#!/usr/bin/env python3
"""
Exemplo de Integra√ß√£o com Sistema Gmail Independente
Execute este script para testar todas as funcionalidades da API
"""

import requests
import json
import time
from datetime import datetime

# Configura√ß√£o da API
BASE_URL = "https://37b18808-226f-4838-9cd0-06e8905de082-00-24jzov5xta9v4.spock.replit.dev"
API_KEY = "gmail-verification-api-2024"

headers = {
    "Content-Type": "application/json",
    "X-API-Key": API_KEY
}

def print_separator(title):
    print(f"\n{'='*50}")
    print(f"  {title}")
    print('='*50)

def print_response(response):
    print(f"Status: {response.status_code}")
    try:
        data = response.json()
        print(f"Resposta: {json.dumps(data, indent=2, ensure_ascii=False)}")
        return data
    except:
        print(f"Resposta: {response.text}")
        return None

def test_check_user():
    print_separator("üîç VERIFICA√á√ÉO DE USU√ÅRIO")
    
    response = requests.post(f"{BASE_URL}/api/external/check-user", 
                           headers=headers,
                           json={"email": "suport.com@gmail.oficial"})
    
    return print_response(response)

def test_basic_verification():
    print_separator("üìß VERIFICA√á√ÉO B√ÅSICA")
    
    response = requests.post(f"{BASE_URL}/api/external/send-verification",
                           headers=headers,
                           json={
                               "to_email": "suport.com@gmail.oficial",
                               "site_name": "Teste API Python",
                               "verification_code": f"PY{int(time.time()) % 10000}",
                               "verification_url": "https://meusite.com/verify?token=abc123",
                               "priority": "high",
                               "type": "security",
                               "expires_in": 3600
                           })
    
    return print_response(response)

def test_premium_verification():
    print_separator("‚≠ê VERIFICA√á√ÉO PREMIUM")
    
    response = requests.post(f"{BASE_URL}/api/external/send-advanced-verification",
                           headers=headers,
                           json={
                               "to_email": "suport.com@gmail.oficial",
                               "site_name": "App Premium Python",
                               "verification_code": f"PREM{int(time.time()) % 1000}",
                               "type": "premium",
                               "theme": "modern",
                               "verification_url": "https://premium.com/verify"
                           })
    
    return print_response(response)

def test_enterprise_verification():
    print_separator("üè¢ VERIFICA√á√ÉO EMPRESARIAL")
    
    response = requests.post(f"{BASE_URL}/api/external/send-advanced-verification",
                           headers=headers,
                           json={
                               "to_email": "suport.com@gmail.oficial",
                               "site_name": "Empresa Corp",
                               "verification_code": f"ENT{int(time.time()) % 1000}",
                               "type": "enterprise",
                               "theme": "classic",
                               "custom_branding": True
                           })
    
    return print_response(response)

def test_password_reset():
    print_separator("üîê RECUPERA√á√ÉO DE SENHA")
    
    response = requests.post(f"{BASE_URL}/api/external/send-reset-password",
                           headers=headers,
                           json={
                               "to_email": "suport.com@gmail.oficial",
                               "site_name": "Sistema Teste",
                               "reset_token": f"RST{int(time.time())}",
                               "reset_url": "https://sistema.com/reset-password"
                           })
    
    return print_response(response)

def test_notification():
    print_separator("üîî NOTIFICA√á√ÉO")
    
    response = requests.post(f"{BASE_URL}/api/external/send-notification",
                           headers=headers,
                           json={
                               "to_email": "suport.com@gmail.oficial",
                               "site_name": "App Notifica√ß√µes",
                               "subject": "Nova mensagem importante",
                               "message": f"Esta √© uma notifica√ß√£o de teste enviada em {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}"
                           })
    
    return print_response(response)

def test_quick_login():
    print_separator("‚ö° LOGIN R√ÅPIDO")
    
    # Obter contas dispon√≠veis
    print("üìã Obtendo contas dispon√≠veis...")
    response = requests.get(f"{BASE_URL}/api/quick-login/accounts")
    accounts_data = print_response(response)
    
    time.sleep(1)
    
    # Testar login r√°pido
    print("\nüöÄ Testando login r√°pido...")
    response = requests.post(f"{BASE_URL}/api/quick-login/validate",
                           headers={"Content-Type": "application/json"},
                           json={"email": "suport.com@gmail.oficial"})
    
    return print_response(response)

def main():
    print("üß™ TESTE COMPLETO DA API - Sistema Gmail Independente")
    print(f"üåê URL Base: {BASE_URL}")
    print(f"üîë API Key: {API_KEY[:20]}...")
    
    try:
        # Executar todos os testes
        test_check_user()
        time.sleep(2)
        
        test_basic_verification()
        time.sleep(2)
        
        test_premium_verification()
        time.sleep(2)
        
        test_enterprise_verification()
        time.sleep(2)
        
        test_password_reset()
        time.sleep(2)
        
        test_notification()
        time.sleep(2)
        
        test_quick_login()
        
        print_separator("‚úÖ TODOS OS TESTES CONCLU√çDOS")
        print("‚ú® API funcionando corretamente!")
        print("üìß Verifique os emails recebidos no sistema")
        print(f"üîó Acesse: {BASE_URL}")
        
    except Exception as e:
        print_separator("‚ùå ERRO NO TESTE")
        print(f"Erro: {e}")
        print("Verifique se o servidor est√° rodando e a URL est√° correta")

if __name__ == "__main__":
    main()
