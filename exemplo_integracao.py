
#!/usr/bin/env python3
"""
Exemplo de integra√ß√£o com o Sistema Gmail Independente
Este script mostra como usar a API externa para enviar emails de verifica√ß√£o
"""

import requests
import json
import random
import string

# Configura√ß√µes
GMAIL_API_URL = "http://localhost:5000"  # Altere para sua URL do Replit
API_KEY = "gmail-verification-api-2024"

def generate_verification_code(length=6):
    """Gera um c√≥digo de verifica√ß√£o aleat√≥rio"""
    return ''.join(random.choices(string.digits, k=length))

def generate_token(length=32):
    """Gera um token aleat√≥rio"""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def check_user_exists(email):
    """Verifica se um usu√°rio existe no sistema Gmail"""
    headers = {
        'Content-Type': 'application/json',
        'X-API-Key': API_KEY
    }
    
    data = {'email': email}
    
    try:
        response = requests.post(
            f"{GMAIL_API_URL}/api/external/check-user",
            json=data,
            headers=headers
        )
        
        if response.status_code == 200:
            result = response.json()
            return result['exists'], result.get('user_info')
        else:
            print(f"Erro ao verificar usu√°rio: {response.status_code}")
            return False, None
            
    except Exception as e:
        print(f"Erro na requisi√ß√£o: {e}")
        return False, None

def send_verification_email(email, site_name):
    """Envia email de verifica√ß√£o"""
    # Primeiro verificar se o usu√°rio existe
    exists, user_info = check_user_exists(email)
    
    if not exists:
        print(f"‚ùå Usu√°rio {email} n√£o encontrado no sistema")
        return False
    
    print(f"‚úÖ Usu√°rio encontrado: {user_info['name']}")
    
    # Gerar c√≥digo e URL de verifica√ß√£o
    verification_code = generate_verification_code()
    verification_url = f"https://meusite.com/verify?email={email}&code={verification_code}"
    
    headers = {
        'Content-Type': 'application/json',
        'X-API-Key': API_KEY
    }
    
    data = {
        'to_email': email,
        'site_name': site_name,
        'verification_code': verification_code,
        'verification_url': verification_url
    }
    
    try:
        response = requests.post(
            f"{GMAIL_API_URL}/api/external/send-verification",
            json=data,
            headers=headers
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Email de verifica√ß√£o enviado!")
            print(f"   Email ID: {result['email_id']}")
            print(f"   C√≥digo: {verification_code}")
            return True
        else:
            error = response.json()
            print(f"‚ùå Erro: {error['error']}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return False

def send_password_reset(email, site_name):
    """Envia email de recupera√ß√£o de senha"""
    # Verificar se usu√°rio existe
    exists, user_info = check_user_exists(email)
    
    if not exists:
        print(f"‚ùå Usu√°rio {email} n√£o encontrado")
        return False
    
    # Gerar token de recupera√ß√£o
    reset_token = generate_token()
    reset_url = f"https://meusite.com/reset-password?token={reset_token}"
    
    headers = {
        'Content-Type': 'application/json',
        'X-API-Key': API_KEY
    }
    
    data = {
        'to_email': email,
        'site_name': site_name,
        'reset_token': reset_token,
        'reset_url': reset_url
    }
    
    try:
        response = requests.post(
            f"{GMAIL_API_URL}/api/external/send-reset-password",
            json=data,
            headers=headers
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Email de recupera√ß√£o enviado!")
            print(f"   Token: {reset_token}")
            return True
        else:
            error = response.json()
            print(f"‚ùå Erro: {error['error']}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return False

def send_notification(email, site_name, subject, message):
    """Envia email de notifica√ß√£o"""
    headers = {
        'Content-Type': 'application/json',
        'X-API-Key': API_KEY
    }
    
    data = {
        'to_email': email,
        'site_name': site_name,
        'subject': subject,
        'message': message
    }
    
    try:
        response = requests.post(
            f"{GMAIL_API_URL}/api/external/send-notification",
            json=data,
            headers=headers
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Notifica√ß√£o enviada!")
            return True
        else:
            error = response.json()
            print(f"‚ùå Erro: {error['error']}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return False

def main():
    """Exemplo de uso da API"""
    print("üöÄ Testando integra√ß√£o com Sistema Gmail Independente")
    print("=" * 60)
    
    # Email para testar (use um email que existe no sistema)
    test_email = "suport.com@gmail.oficial"  # Email do admin
    site_name = "Meu Site de Teste"
    
    print(f"üìß Testando com email: {test_email}")
    print()
    
    # Teste 1: Verificar se usu√°rio existe
    print("1Ô∏è‚É£ Verificando se usu√°rio existe...")
    exists, user_info = check_user_exists(test_email)
    if exists:
        print(f"‚úÖ Usu√°rio existe: {user_info['name']} (ID: {user_info['user_id']})")
    else:
        print("‚ùå Usu√°rio n√£o encontrado")
        return
    
    print()
    
    # Teste 2: Enviar email de verifica√ß√£o
    print("2Ô∏è‚É£ Enviando email de verifica√ß√£o...")
    send_verification_email(test_email, site_name)
    print()
    
    # Teste 3: Enviar email de recupera√ß√£o
    print("3Ô∏è‚É£ Enviando email de recupera√ß√£o de senha...")
    send_password_reset(test_email, site_name)
    print()
    
    # Teste 4: Enviar notifica√ß√£o
    print("4Ô∏è‚É£ Enviando notifica√ß√£o...")
    send_notification(
        test_email,
        site_name,
        "Bem-vindo ao nosso sistema!",
        "Obrigado por se cadastrar! Aproveite todos os recursos dispon√≠veis."
    )
    print()
    
    print("‚úÖ Todos os testes conclu√≠dos!")
    print("üì¨ Verifique a caixa de entrada no Sistema Gmail para ver os emails enviados")

if __name__ == "__main__":
    main()
